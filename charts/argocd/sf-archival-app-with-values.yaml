apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: archival
spec:
  destination:
    name: ''
    namespace: kafka
    server: 'https://kubernetes.default.svc'
  source:
    path: charts/sf-archival
    repoURL: 'https://github.com/snappyflow/helm-charts.git'
    targetRevision: stage
    helm:
      valueFiles:
        - values.yaml
      values: |-
        compaction-controller:
          maxSimultaneousRun: 10
        global:
          imagePullSecrets:
          - name: snappyflowdockersecret
          kafkaBrokers: kafka-cp-kafka-headless:9092
          postgresql:
            host: pg-bouncer-pgbouncer.apm
            postgresqlDatabase: archival
            postgresqlPassword: maplelabs
            postgresqlUsername: snappyflow
            servicePort: 6432
          secrets:
            aws:
              AWS_ACCESS_KEY_ID: ' '
              AWS_IAM_ROLE_ARN: arn:aws:iam::159750416379:role/stage-portal-setup-EKS-Worker-Node-Role
              AWS_QUEUE_ARN: arn:aws:sqs:us-west-2:159750416379:sf-archival-inventory
              AWS_QUEUE_URL: https://sqs.us-west-2.amazonaws.com/159750416379/sf-archival-inventory
              AWS_SECRET_ACCESS_KEY: ' '
              use_iam_role: true
          sfNodeManager:
            enabled: true
            priorityClassName: sf-critical-pod
          sfScheduler:
            enabled: true
            schedulerName: sf-scheduler
          snappyflowAppName: archival
          snappyflowProjectName: snappyflow-app
        spark-history-server:
          s3:
            logDirectory: spark-264722184-hdfs/spark-hs
        spark-manager:
          infrastructure:
            EcsFargate:
              enabled: false
          jobserver:
            sparkProperties:
              logDirectory: spark-264722184-hdfs/spark-hs
  sources: []
  project: default
  syncPolicy:
    retry:
      limit: 3
      backoff:
        duration: 5s
        maxDuration: 5m0s
        factor: 2
